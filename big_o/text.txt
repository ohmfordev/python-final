



1 O(1) - Constant Time:
ในกรณีนี้ เราสามารถใช้ฟังก์ชันที่มีเวลาการทำงานคงที่ไม่ว่าขนาดของข้อมูลจะเป็นเท่าไหร่ก็ตาม

def constant_example(items):
    return items[0]

# เรียกใช้ฟังก์ชัน
items = [1, 2, 3, 4, 5]
print(constant_example(items))  # ผลลัพธ์: 1


2.O(n) - Linear Time:
ในกรณีนี้ เรามีการทำงานที่มีความเชื่อมโยงกับขนาดของข้อมูล
python

def linear_example(items):
    for item in items:
        print(item)

# เรียกใช้ฟังก์ชัน
items = [1, 2, 3, 4, 5]
linear_example(items)  # ผลลัพธ์: 1 2 3 4 5



O(n^2) - Quadratic Time:
ในกรณีนี้ เรามีการทำงานที่เพิ่มขึ้นเป็นสี่เท่าเมื่อขนาดข้อมูลเพิ่มขึ้นเป็นสองเท่า
def quadratic_example(items):
    for item1 in items:
        for item2 in items:
            print(item1, item2)

# เรียกใช้ฟังก์ชัน
items = [1, 2, 3]
quadratic_example(items)  


4. O(log n) - Logarithmic Time:
ในกรณีนี้ เรามีการลดขนาดข้อมูลอย่างมีประสิทธิภาพตามฟังก์ชันล็อก
import math

def log_example(n):
    return math.log(n)

# เรียกใช้ฟังก์ชัน
print(log_example(100))  # ผลลัพธ์: 4.605170185988092


5. O(n log n) - Linearithmic Time:
ในกรณีนี้ เรามีการทำงานที่มีประสิทธิภาพเสมอเมื่อขนาดข้อมูลเพิ่มขึ้น แต่ไม่ใช่อย่างเชื่อมโยงเช่นเดียวกับกรณี Quadratic
python
